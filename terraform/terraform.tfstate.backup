{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 28,
  "lineage": "86572edb-d2e4-c1d3-f820-0906517800fb",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "neo4j_vm",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": true,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20250701",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": {},
                    "size": 30,
                    "storage_pool": "",
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/paulbonneville-com/zones/us-central1-a/disks/arrgh-neo4j"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {
              "environment": "production",
              "managed_by": "terraform",
              "service": "neo4j"
            },
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/paulbonneville-com/zones/us-central1-a/instances/arrgh-neo4j",
            "instance_id": "4549074172935954582",
            "label_fingerprint": "cpPNnaYBdKw=",
            "labels": {
              "environment": "production",
              "managed_by": "terraform",
              "service": "neo4j"
            },
            "machine_type": "e2-micro",
            "metadata": {
              "ssh-keys": "neo4j:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmaHKoxLnAqGHcTuVXAo4F4zvmdZZo0myFqRucRPPO7VXtNynOKugaxk68JyDItsMafYOFSuZFPidqPcn2x22r2p0pV6lNo+zvEcdK98faH/TTiO9kRv3DT3fLgjlilSDadSoC1pFXVWCyARkRukiaeZNmOEVtKDovtOjIHYNTpTZ7jCf5KCkNoaU47jwInQnTAh/8RG3HL5gT8cVA/2r4L4KKA0bxzOFfgs9L09xDME6tK5WvZQIG/6ssCGO8KCMpvnYFvE1w/YHyYsRIah/+tFeNoykJngPWf1bcQfCe9QuJkTa6e6J2kYFd7ak0QaK7fs1D/H7D5G1abank94Nd neo4j-vm-key\n"
            },
            "metadata_fingerprint": "ggwZJ780-W8=",
            "metadata_startup_script": "    #!/bin/bash\n    \n    # Update system\n    apt-get update\n    apt-get install -y curl wget gnupg lsb-release\n    \n    # Install Docker\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n    apt-get update\n    apt-get install -y docker-ce docker-ce-cli containerd.io\n    \n    # Install Docker Compose\n    curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose\n    \n    # Configure Docker to start on boot\n    systemctl enable docker\n    systemctl start docker\n    \n    # Add neo4j user to docker group\n    useradd -m -s /bin/bash neo4j\n    usermod -aG docker neo4j\n    \n    # Create neo4j directories\n    mkdir -p /opt/neo4j/{data,logs,config,import}\n    chown -R neo4j:neo4j /opt/neo4j\n    \n    # Create docker-compose.yml\n    cat \u003e /opt/neo4j/docker-compose.yml \u003c\u003c 'DOCKER_COMPOSE_EOF'\nversion: '3.8'\n\nservices:\n  neo4j:\n    image: neo4j:5.15-community\n    container_name: arrgh-neo4j\n    restart: unless-stopped\n    \n    environment:\n      - NEO4J_AUTH=neo4j/SecureNeo4jPass123!\n      - NEO4J_server_memory_heap_initial__size=256m\n      - NEO4J_server_memory_heap_max__size=512m\n      - NEO4J_server_memory_pagecache_size=256m\n      - NEO4J_server_default__listen__address=0.0.0.0\n      - NEO4J_server_default__database=neo4j\n      - NEO4J_server_db_logs_query_enabled=INFO\n      - NEO4J_server_http_enabled=true\n      - NEO4J_server_https_enabled=false\n      - NEO4J_server_bolt_enabled=true\n      - NEO4J_server_db_transaction_timeout=30s\n      - NEO4J_server_db_lock_acquisition_timeout=20s\n      - NEO4J_server_logs_user_level=INFO\n      - NEO4J_server_logs_security_level=INFO\n    \n    volumes:\n      - ./data:/data\n      - ./logs:/logs\n      - ./import:/var/lib/neo4j/import\n    \n    ports:\n      - \"7474:7474\"\n      - \"7687:7687\"\n    \n    healthcheck:\n      test: [\"CMD-SHELL\", \"cypher-shell -u neo4j -p SecureNeo4jPass123! 'RETURN 1;' || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    \n    deploy:\n      resources:\n        limits:\n          memory: 768M\n          cpus: '0.5'\n        reservations:\n          memory: 512M\n          cpus: '0.25'\n    \n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\nDOCKER_COMPOSE_EOF\n    \n    # Create startup script\n    cat \u003e /opt/neo4j/start.sh \u003c\u003c 'START_SCRIPT_EOF'\n#!/bin/bash\ncd /opt/neo4j\ndocker-compose up -d\nSTART_SCRIPT_EOF\n    \n    chmod +x /opt/neo4j/start.sh\n    chown neo4j:neo4j /opt/neo4j/start.sh\n    \n    # Create systemd service for Neo4j\n    cat \u003e /etc/systemd/system/neo4j-docker.service \u003c\u003c 'SERVICE_EOF'\n[Unit]\nDescription=Neo4j Docker Container\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=/opt/neo4j\nExecStart=/usr/local/bin/docker-compose up -d\nExecStop=/usr/local/bin/docker-compose down\nUser=neo4j\nGroup=neo4j\n\n[Install]\nWantedBy=multi-user.target\nSERVICE_EOF\n    \n    # Enable and start Neo4j service\n    systemctl daemon-reload\n    systemctl enable neo4j-docker.service\n    systemctl start neo4j-docker.service\n    \n    # Install monitoring tools\n    apt-get install -y htop iotop\n    \n    # Create log rotation for Docker logs\n    cat \u003e /etc/logrotate.d/docker \u003c\u003c 'LOGROTATE_EOF'\n/var/lib/docker/containers/*/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0644 root root\n}\nLOGROTATE_EOF\n    \n    # Setup CloudWatch monitoring (optional)\n    if [ \"true\" = \"true\" ]; then\n        curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\n        dpkg -i amazon-cloudwatch-agent.deb\n    fi\n    \n    echo \"Neo4j VM setup completed successfully\" | logger -t neo4j-setup\n",
            "min_cpu_platform": "",
            "name": "arrgh-neo4j",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.63.143.68",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/paulbonneville-com/global/networks/default",
                "network_ip": "10.128.15.208",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/paulbonneville-com/regions/us-central1/subnetworks/default",
                "subnetwork_project": "paulbonneville-com"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "paulbonneville-com",
            "reservation_affinity": [],
            "resource_policies": [],
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "max_run_duration": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "on_instance_stop_action": [],
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/paulbonneville-com/zones/us-central1-a/instances/arrgh-neo4j",
            "service_account": [
              {
                "email": "neo4j-vm-sa@paulbonneville-com.iam.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": [
              "neo4j-server"
            ],
            "tags_fingerprint": "VitP6uH_M-I=",
            "terraform_labels": {
              "environment": "production",
              "managed_by": "terraform",
              "service": "neo4j"
            },
            "timeouts": null,
            "zone": "us-central1-a"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "metadata_startup_script"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_service_account.neo4j_service_account"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "neo4j_vm_with_static_ip",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "google_service_account",
      "name": "neo4j_service_account",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "neo4j-vm-sa",
            "create_ignore_already_exists": null,
            "description": "Service account for Neo4j VM instance",
            "disabled": false,
            "display_name": "Neo4j VM Service Account",
            "email": "neo4j-vm-sa@paulbonneville-com.iam.gserviceaccount.com",
            "id": "projects/paulbonneville-com/serviceAccounts/neo4j-vm-sa@paulbonneville-com.iam.gserviceaccount.com",
            "member": "serviceAccount:neo4j-vm-sa@paulbonneville-com.iam.gserviceaccount.com",
            "name": "projects/paulbonneville-com/serviceAccounts/neo4j-vm-sa@paulbonneville-com.iam.gserviceaccount.com",
            "project": "paulbonneville-com",
            "timeouts": null,
            "unique_id": "101089898573611924900"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ],
  "check_results": null
}
